name: develop branch CI/CD

on: 
  push:            
    branches: develop ## develop 브랜치 대상
    
jobs:
  build: 
    runs-on: ubuntu-latest
    steps:    
      - name: repository 내용 가져오기
        uses: actions/checkout@master

      - name: ENV, MONGO_ENV 환경변수 생성
        run: |
          touch env
          echo "${{ secrets.DEV_ENV }}" > .env
          touch mongo.env
          echo "${{ secrets.DEV_MONGO_ENV }}" > mongo.env
       
      - name: Docker 이미지 빌드
        # if: contains(github.ref, 'main')
        # 우선은 dev와 prod를 별개의 docker repository로 설정하기
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DEV_DOCKER_REPO }} -platform linux/arm64/v8 .
          docker push ${{ secrets.DEV_DOCKER_REPO }}
     
      
      ## docker-compose.yml 서버에 이동
      - name: docker-compose.yml 파일 이동
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: docker-compose-dev.yml
          target: "/home/${{ secrets.DEV_USER }}/${{ secrets.DIR }}"

      - name: Docker 이미지 pull 이후 down/up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.DIR }}
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo echo "${{ secrets.DEV_ENV }}" > .env
            sudo echo "${{ secrets.DEV_MONGO_ENV }}" > mongo.env
            sudo docker-compose -f docker-compose-dev.yml down -v
            sudo docker-compose -f docker-compose-dev.yml up --build -d
          # sudo docker rm -f $(docker ps -qa)
          